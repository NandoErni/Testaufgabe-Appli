// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using testaufgabe.Data;

#nullable disable

namespace testaufgabe.Migrations
{
    [DbContext(typeof(WeatherDataContext))]
    [Migration("20240802204238_InitialCreate")]
    partial class InitialCreate
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder.HasAnnotation("ProductVersion", "8.0.7");

            modelBuilder.Entity("testaufgabe.Models.WeatherData", b =>
                {
                    b.Property<int>("Station")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("Timestamp")
                        .HasColumnType("TEXT");

                    b.HasKey("Station", "Timestamp");

                    b.ToTable("WeatherData");
                });

            modelBuilder.Entity("testaufgabe.Models.WeatherData", b =>
                {
                    b.OwnsOne("testaufgabe.Models.WeatherDataValue", "AirTemperature", b1 =>
                        {
                            b1.Property<int>("WeatherDataStation")
                                .HasColumnType("INTEGER");

                            b1.Property<DateTime>("WeatherDataTimestamp")
                                .HasColumnType("TEXT");

                            b1.Property<string>("Unit")
                                .IsRequired()
                                .HasColumnType("TEXT")
                                .HasColumnName("AirTemperature_Unit");

                            b1.Property<double>("Value")
                                .HasColumnType("REAL")
                                .HasColumnName("AirTemperature_Value");

                            b1.HasKey("WeatherDataStation", "WeatherDataTimestamp");

                            b1.ToTable("WeatherData");

                            b1.WithOwner()
                                .HasForeignKey("WeatherDataStation", "WeatherDataTimestamp");
                        });

                    b.OwnsOne("testaufgabe.Models.WeatherDataValue", "BarometricPressure", b1 =>
                        {
                            b1.Property<int>("WeatherDataStation")
                                .HasColumnType("INTEGER");

                            b1.Property<DateTime>("WeatherDataTimestamp")
                                .HasColumnType("TEXT");

                            b1.Property<string>("Unit")
                                .IsRequired()
                                .HasColumnType("TEXT")
                                .HasColumnName("BarometricPressure_Unit");

                            b1.Property<double>("Value")
                                .HasColumnType("REAL")
                                .HasColumnName("BarometricPressure_Value");

                            b1.HasKey("WeatherDataStation", "WeatherDataTimestamp");

                            b1.ToTable("WeatherData");

                            b1.WithOwner()
                                .HasForeignKey("WeatherDataStation", "WeatherDataTimestamp");
                        });

                    b.OwnsOne("testaufgabe.Models.WeatherDataValue", "Humidity", b1 =>
                        {
                            b1.Property<int>("WeatherDataStation")
                                .HasColumnType("INTEGER");

                            b1.Property<DateTime>("WeatherDataTimestamp")
                                .HasColumnType("TEXT");

                            b1.Property<string>("Unit")
                                .IsRequired()
                                .HasColumnType("TEXT")
                                .HasColumnName("Humidity_Unit");

                            b1.Property<double>("Value")
                                .HasColumnType("REAL")
                                .HasColumnName("Humidity_Value");

                            b1.HasKey("WeatherDataStation", "WeatherDataTimestamp");

                            b1.ToTable("WeatherData");

                            b1.WithOwner()
                                .HasForeignKey("WeatherDataStation", "WeatherDataTimestamp");
                        });

                    b.OwnsOne("testaufgabe.Models.WeatherDataValue", "WaterTemperature", b1 =>
                        {
                            b1.Property<int>("WeatherDataStation")
                                .HasColumnType("INTEGER");

                            b1.Property<DateTime>("WeatherDataTimestamp")
                                .HasColumnType("TEXT");

                            b1.Property<string>("Unit")
                                .IsRequired()
                                .HasColumnType("TEXT")
                                .HasColumnName("WaterTemperature_Unit");

                            b1.Property<double>("Value")
                                .HasColumnType("REAL")
                                .HasColumnName("WaterTemperature_Value");

                            b1.HasKey("WeatherDataStation", "WeatherDataTimestamp");

                            b1.ToTable("WeatherData");

                            b1.WithOwner()
                                .HasForeignKey("WeatherDataStation", "WeatherDataTimestamp");
                        });

                    b.Navigation("AirTemperature");

                    b.Navigation("BarometricPressure");

                    b.Navigation("Humidity");

                    b.Navigation("WaterTemperature");
                });
#pragma warning restore 612, 618
        }
    }
}
